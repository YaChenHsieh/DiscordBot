# Workflow -> Job -> Step -> Action
name: Discord Bot CI/CD

# trigger 
on:
  push:
    branches:
      # - main  # Trigger the workflow when code is pushed to the main branch
      - dev

jobs:
  # 1st Job in parallel
  test:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"  # Set Python version
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt  # Install dependencies
      
      - name: Run tests
        run: pytest -v  # Execute tests with verbose output
      
  # 2nd Job in parallel
  deploy_ec2:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner to run the below instuctions
    needs: test  # Only run if the 'test' job passes !!!
    steps:
      - name: Create .env file
        run: |
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> .env
          echo "DISCORD_SERVER_ID=${{ secrets.DISCORD_SERVER_ID }}" >> .env
          echo "DISCORD_CHANNEL_ID=${{ secrets.DISCORD_CHANNEL_ID }}" >> .env
          echo "SPREADSHEET_ID=${{ secrets.SPREADSHEET_ID }}" >> .env
          echo "RANGE_NAME=${{ secrets.RANGE_NAME }}" >> .env
          echo "CREDENTIALS_FILE=credentials.json" >> .env
          echo "TOKEN_FILE=token.json" >> .env

      - name: Set up Google credentials and token
        run: |
          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials.json
          echo '${{ secrets.GOOGLE_TOKEN }}' > token.json
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa_github
          chmod 600 ~/.ssh/id_rsa_github
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts # Scan the pub key from Ec2 and put in knownhosts
      
      - name: Upload .env & credentials to EC2
        run: |
          scp -i ~/.ssh/id_rsa_github .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PROJECT_PATH }}/
          scp -i ~/.ssh/id_rsa_github credentials.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PROJECT_PATH }}/
          scp -i ~/.ssh/id_rsa_github token.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PROJECT_PATH }}/

      - name: Deploy to EC2 (for 30 seconds)
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Starting deployment on EC2..."
            
            cd ${{ secrets.EC2_PROJECT_PATH }}
            git pull origin dev  # pull the code 
            
            # enable Python env and install
            source myenv/bin/activate
            pip install -r requirements.txt
            
            echo "Running program for 30 seconds..."
            timeout 30s python3 main.py
            
            echo "Deployment completed!"
          EOF
          # timeout 30s -> nohup python3 main.py & sleep 30 && pkill -f main.py
